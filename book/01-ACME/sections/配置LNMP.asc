
=== 配置LNMP

==== 配置nginx支持php

.允许 Nginx 服务器解析 PHP 文件，并将请求传递给 PHP-FPM 进程处理。
[source, bash]
----
cat <<EOF > /etc/nginx/conf.d/example.com.conf
server {
    listen 80;
    server_name 192.168.2.111;

    root /usr/share/nginx/html;
    index index.php index.html index.htm;

    location / {
        try_files $uri $uri/ =404;
    }

    location ~ \.php$ {
        include fastcgi_params;
        fastcgi_pass unix:/run/php-fpm/www.sock;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
}

EOF
----

.注释
[source,bash]
----
# server  服务器吧
# listen  监听端口
# index  索引；指数指标
# location  地点，位置
# include  包含 ；把……列为一部分
# fastcgi  启动   pass  经过
# param  参数

----

.查看 PHP-FPM 配置文件中的套接字路径
[source,bash]
----
grep -i 'listen' /etc/php-fpm.d/*.conf
#  grep  筛选过滤

.检查配置文件是否语法有问题
[source,bash]
nginx -t
----

.总结
[source, bash]
----
通过添加 location 块配置nginx，使其能够解析以 .php 结尾的文件，并将请求传递给PHP-FPM处理
----

.测试
[source,bash]
----
echo "<?php phpinfo(); ?>" > /usr/share/nginx/html/test.php
#  测试PHP解析是否成功，创建一个包含 PHP 信息的测试文件
----

.保存文件重载nginx
[source, bash]
----
systemctl reload nginx

----

.访问网页查看php信息
[source,bash]
http://192.168.2.111/test.php


==== 测试nginx链接mysql

.进入mysql
[source, bash]
----
mysql -uroot11 -pComplexPassword123!

----

.创建数据库和用户
[source, bash]
----
CREATE DATABASE mydatabase;
CREATE USER 'root11'@'localhost' IDENTIFIED BY 'ComplexPassword123!';
GRANT ALL PRIVILEGES ON mydatabase.* TO 'root11'@'localhost';
FLUSH PRIVILEGES;

----

.注释
[source,bash]
----
#  create  创建
# database  数据库
# IDENTIFIED  被识别的
# grant  授予；给予
# all  全部
----

==== 测试链接到数据库

.配置 Nginx 服务器以支持 PHP 文件，并测试连接到 MySQL 数据库。
[source,bash]
----
cat <<EOF > /etc/nginx/conf.d/example2.com.conf
server {
    listen 80;
    server_name example2.com;

    root /usr/share/nginx/html;
    index index.php index.html index.htm;

    location / {
        try_files \$uri \$uri/ =404;
    }

    location ~ \.php$ {
        include fastcgi_params;
        fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        fastcgi_param PATH_INFO \$fastcgi_path_info;
        fastcgi_param PATH_TRANSLATED \$document_root\$fastcgi_path_info;
    }
}
EOF

----

.检查配置文件是否语法有问题
[source,bash]
nginx -t

.测试mysql链接
[source, bash]
----
cat <<EOF > /usr/share/nginx/html/test-mysql.php
<?php
\$mysqli = new mysqli("localhost", "root11", "ComplexPassword123!", "mydatabase");

if (\$mysqli->connect_error) {
    die("Connection failed: " . \$mysqli->connect_error);
}

echo "Connected successfully";
\$mysqli->close();
?>
EOF

----

.注释
[source, bash]
----
于创建一个PHP脚本文件 test-mysql.php，该脚本会尝试连接到MySQL数据库，并打印出连接是否成功的消息。这有助于确保MySQL数据库的连接配置正确。
----

.保存文件重载
[source, bash]
----
systemctl reload nginx.service      #  重新加载配置
systemctl reload php-fpm
----

.查看链接状态
[source, bash]
----
http://192.168.2.111/test-mysql.php
----